import React, { createContext, useContext, useState, useEffect } from 'react';
import { useAuth } from './AuthContext';
import { 
  getUserSkillStats,
  getLatestUserRecommendations,
  generateUserRecommendations,
  getAllSkillTags
} from '../firebase/services';
import initializeSkillTags from '../utils/initSkillTags';

const SkillsContext = createContext();

export function useSkills() {
  return useContext(SkillsContext);
}

export function SkillsProvider({ children }) {
  const { currentUser } = useAuth();
  const [loading, setLoading] = useState(true);
  const [skillStats, setSkillStats] = useState([]);
  const [recommendations, setRecommendations] = useState(null);
  const [skillTags, setSkillTags] = useState([]);
  const [lastUpdated, setLastUpdated] = useState(null);

  useEffect(() => {
    const loadSkillData = async () => {
      if (!currentUser) {
        setLoading(false);
        return;
      }

      setLoading(true);
      try {
        // Initialize skill tags first to ensure subcategory mapping works
        await initializeSkillTags();
        
        // Load skill tags
        const tagsData = await getAllSkillTags();
        setSkillTags(tagsData);
        console.log('Loaded skill tags:', tagsData.length);

        // Load user skill stats
        const statsData = await getUserSkillStats(currentUser.uid);
        setSkillStats(statsData);
        console.log('Loaded skill stats:', statsData.length);

        // Load recommendations
        let recommendationsData = await getLatestUserRecommendations(currentUser.uid);
        
        // If no recommendations exist or they're older than 24 hours, generate new ones
        if (!recommendationsData || 
            (recommendationsData.generatedAt && 
             Date.now() - recommendationsData.generatedAt.toDate() > 24 * 60 * 60 * 1000)) {
          console.log('Generating new recommendations...');
          recommendationsData = await generateUserRecommendations(currentUser.uid);
        }
        
        setRecommendations(recommendationsData);
        setLastUpdated(new Date());
      } catch (error) {
        console.error("Error loading skill data:", error);
      } finally {
        setLoading(false);
      }
    };

    loadSkillData();
  }, [currentUser]);

  // Function to refresh user data (call after completing a quiz or exam)
  const refreshUserData = async () => {
    if (!currentUser) return;
    
    setLoading(true);
    try {
      console.log('Refreshing user data and recommendations...');
      
      // Ensure skill tags are properly initialized
      await initializeSkillTags();
      
      // Reload skill tags
      const tagsData = await getAllSkillTags();
      setSkillTags(tagsData);
      
      // Reload skill stats
      const statsData = await getUserSkillStats(currentUser.uid);
      setSkillStats(statsData);
      console.log('Reloaded skill stats:', statsData.length);
      
      // Generate fresh recommendations
      const recommendationsData = await generateUserRecommendations(currentUser.uid);
      setRecommendations(recommendationsData);
      
      setLastUpdated(new Date());
    } catch (error) {
      console.error("Error refreshing user data:", error);
    } finally {
      setLoading(false);
    }
  };

  // Get skill stats categorized as weak/moderate/strong
  const getCategorizedSkills = () => {
    if (!skillStats.length) return { weak: [], moderate: [], strong: [] };
    
    return {
      weak: skillStats.filter(stat => stat.accuracyRate < 70),
      moderate: skillStats.filter(stat => stat.accuracyRate >= 70 && stat.accuracyRate <= 85),
      strong: skillStats.filter(stat => stat.accuracyRate > 85)
    };
  };

  // Get skill name from ID
  const getSkillNameById = (skillId) => {
    const skill = skillTags.find(s => s.id === skillId);
    return skill ? skill.name : 'Unknown Skill';
  };

  const value = {
    loading,
    skillStats,
    recommendations,
    skillTags,
    lastUpdated,
    refreshUserData,
    getCategorizedSkills,
    getSkillNameById
  };

  return (
    <SkillsContext.Provider value={value}>
      {children}
    </SkillsContext.Provider>
  );
}
