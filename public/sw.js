// UltraSAT Service Worker - Advanced Caching Strategy
const CACHE_NAME = 'ultrasat-v1.2.0';
const STATIC_CACHE = 'ultrasat-static-v1.2.0';
const DYNAMIC_CACHE = 'ultrasat-dynamic-v1.2.0';
const IMAGE_CACHE = 'ultrasat-images-v1.2.0';

// Cache strategies based on asset types
const CACHE_STRATEGIES = {
  // Static assets - cache first, very long TTL
  STATIC_ASSETS: [
    '/',
    '/static/js/',
    '/static/css/',
    '/static/media/',
    '/images/optimized/',
    '/manifest.json'
  ],
  
  // API responses - network first with fallback
  API_ROUTES: [
    '/api/',
    'https://firebaseapp.com/',
    'https://googleapis.com/'
  ],
  
  // External resources - cache with shorter TTL
  EXTERNAL: [
    'https://fonts.googleapis.com/',
    'https://fonts.gstatic.com/',
    'https://js.stripe.com/',
    'https://www.googletagmanager.com/'
  ]
};

// Install event - cache critical resources immediately
self.addEventListener('install', event => {
  console.log('🚀 Service Worker installing...');
  
  event.waitUntil(
    Promise.all([
      // Cache critical static assets
      caches.open(STATIC_CACHE).then(cache => {
        return cache.addAll([
          '/',
          '/static/css/main.css', // Will be generated by build
          '/images/optimized/middle.webp',
          '/images/optimized/aihot.webp',
          '/manifest.json',
          '/favicon.ico'
        ].filter(url => url)); // Filter out any undefined URLs
      }),
      
      // Prefetch critical images
      caches.open(IMAGE_CACHE).then(cache => {
        const criticalImages = [
          '/images/optimized/middle.webp',
          '/images/optimized/aihot.webp',
          '/images/optimized/phonescreen.webp'
        ];
        
        return Promise.all(
          criticalImages.map(url => 
            fetch(url).then(response => {
              if (response.ok) {
                cache.put(url, response.clone());
              }
            }).catch(err => console.log(`Failed to cache ${url}:`, err))
          )
        );
      })
    ])
  );
  
  // Force activation of new service worker
  self.skipWaiting();
});

// Activate event - clean up old caches
self.addEventListener('activate', event => {
  console.log('✅ Service Worker activated');
  
  event.waitUntil(
    Promise.all([
      // Clean up old caches
      caches.keys().then(cacheNames => {
        return Promise.all(
          cacheNames.map(cacheName => {
            if (cacheName !== STATIC_CACHE && 
                cacheName !== DYNAMIC_CACHE && 
                cacheName !== IMAGE_CACHE) {
              console.log('🗑️ Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      }),
      
      // Take control immediately
      self.clients.claim()
    ])
  );
});

// Fetch event - implement caching strategies
self.addEventListener('fetch', event => {
  const { request } = event;
  const url = new URL(request.url);
  
  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }
  
  // Skip chrome-extension and other non-http requests
  if (!request.url.startsWith('http')) {
    return;
  }
  
  event.respondWith(
    handleRequest(request, url)
  );
});

// Main request handler with intelligent caching strategies
async function handleRequest(request, url) {
  try {
    // Strategy 1: Static assets - Cache First
    if (isStaticAsset(url)) {
      return await cacheFirst(request, STATIC_CACHE);
    }
    
    // Strategy 2: Images - Cache First with long TTL
    if (isImage(url)) {
      return await cacheFirst(request, IMAGE_CACHE);
    }
    
    // Strategy 3: API calls - Network First
    if (isApiCall(url)) {
      return await networkFirst(request, DYNAMIC_CACHE);
    }
    
    // Strategy 4: External resources - Stale While Revalidate
    if (isExternalResource(url)) {
      return await staleWhileRevalidate(request, DYNAMIC_CACHE);
    }
    
    // Strategy 5: HTML pages - Network First with offline fallback
    if (isHTMLPage(request)) {
      return await networkFirstWithOfflinePage(request);
    }
    
    // Default: Network only for everything else
    return await fetch(request);
    
  } catch (error) {
    console.error('Fetch failed:', error);
    return await getOfflineFallback(request);
  }
}

// Cache First Strategy - for static assets
async function cacheFirst(request, cacheName) {
  const cache = await caches.open(cacheName);
  const cached = await cache.match(request);
  
  if (cached) {
    // Return cached version immediately
    return cached;
  }
  
  // Not in cache, fetch and cache
  try {
    const response = await fetch(request);
    if (response.ok) {
      cache.put(request, response.clone());
    }
    return response;
  } catch (error) {
    console.log('Cache first failed:', error);
    throw error;
  }
}

// Network First Strategy - for API calls
async function networkFirst(request, cacheName) {
  const cache = await caches.open(cacheName);
  
  try {
    const response = await fetch(request);
    if (response.ok) {
      // Cache successful responses
      cache.put(request, response.clone());
    }
    return response;
  } catch (error) {
    // Network failed, try cache
    const cached = await cache.match(request);
    if (cached) {
      return cached;
    }
    throw error;
  }
}

// Stale While Revalidate - for external resources
async function staleWhileRevalidate(request, cacheName) {
  const cache = await caches.open(cacheName);
  const cached = await cache.match(request);
  
  // Start fetch in background
  const fetchPromise = fetch(request).then(response => {
    if (response.ok) {
      cache.put(request, response.clone());
    }
    return response;
  }).catch(err => console.log('Background fetch failed:', err));
  
  // Return cached version immediately if available
  if (cached) {
    return cached;
  }
  
  // Otherwise wait for network
  return await fetchPromise;
}

// Network First with Offline Page
async function networkFirstWithOfflinePage(request) {
  try {
    return await fetch(request);
  } catch (error) {
    // Return cached version or offline page
    const cache = await caches.open(STATIC_CACHE);
    const cached = await cache.match(request);
    
    if (cached) {
      return cached;
    }
    
    // Return root page as fallback for navigation requests
    if (request.mode === 'navigate') {
      return await cache.match('/') || new Response('Offline', { status: 503 });
    }
    
    throw error;
  }
}

// Get appropriate offline fallback
async function getOfflineFallback(request) {
  if (isImage(new URL(request.url))) {
    // Return a placeholder image or cached image
    const cache = await caches.open(IMAGE_CACHE);
    return await cache.match('/images/placeholder.png') || 
           new Response('', { status: 503 });
  }
  
  if (request.mode === 'navigate') {
    const cache = await caches.open(STATIC_CACHE);
    return await cache.match('/') || 
           new Response('App is offline', { status: 503 });
  }
  
  return new Response('Resource unavailable offline', { status: 503 });
}

// Helper functions to categorize requests
function isStaticAsset(url) {
  return url.pathname.includes('/static/') ||
         url.pathname.endsWith('.js') ||
         url.pathname.endsWith('.css') ||
         url.pathname.endsWith('.woff') ||
         url.pathname.endsWith('.woff2') ||
         url.pathname === '/manifest.json' ||
         url.pathname === '/favicon.ico';
}

function isImage(url) {
  return url.pathname.includes('/images/') ||
         /\.(png|jpg|jpeg|gif|webp|svg)(\?.*)?$/i.test(url.pathname);
}

function isApiCall(url) {
  return url.pathname.startsWith('/api/') ||
         url.hostname.includes('firebaseapp.com') ||
         url.hostname.includes('googleapis.com') ||
         url.hostname.includes('firebase.com');
}

function isExternalResource(url) {
  return url.hostname !== self.location.hostname &&
         (url.hostname.includes('fonts.googleapis.com') ||
          url.hostname.includes('fonts.gstatic.com') ||
          url.hostname.includes('js.stripe.com') ||
          url.hostname.includes('googletagmanager.com') ||
          url.hostname.includes('google-analytics.com'));
}

function isHTMLPage(request) {
  return request.mode === 'navigate' ||
         request.headers.get('accept').includes('text/html');
}

// Background sync for offline actions (if needed)
self.addEventListener('sync', event => {
  if (event.tag === 'background-sync') {
    event.waitUntil(doBackgroundSync());
  }
});

async function doBackgroundSync() {
  // Implement background sync logic if needed
  console.log('🔄 Background sync triggered');
}

// Push notification handling (if needed)
self.addEventListener('push', event => {
  if (event.data) {
    const data = event.data.json();
    self.registration.showNotification(data.title, {
      body: data.body,
      icon: '/images/optimized/logo.webp',
      badge: '/images/badge.png'
    });
  }
});

console.log('🛡️ UltraSAT Service Worker loaded with advanced caching strategies'); 